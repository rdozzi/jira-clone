// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(150)
  createAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()
  isDeleted Boolean?  @default(false)

  //Relationships
  user          User[]
  bannedEmail   BannedEmail[]
  project       Project[]
  board         Board[]
  ticket        Ticket[]
  comment       Comment[]
  attachment    Attachment[]
  label         Label[]
  TicketLabel   TicketLabel[]
  ActivityLog   ActivityLog[]
  ProjectMember ProjectMember[]
}

model Project {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(100)
  description    String?       @default("NA") @db.VarChar(500)
  status         ProjectStatus @default(ACTIVE)
  isPublic       Boolean       @default(true)
  ownerId        Int?
  organizationId Int
  createdAt      DateTime      @default(now()) @db.Timestamptz()
  updatedAt      DateTime      @updatedAt @db.Timestamptz()

  // Owner
  owner User? @relation("ProjectOwner", fields: [ownerId], references: [id])

  //Child (One-to-Many)
  Board Board[]

  //Membership (Many-to-Many)
  members ProjectMember[]

  // Parent
  Organization Organization @relation(fields: [organizationId], references: [id])
}

model Board {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(100)
  projectId      Int
  description    String?  @db.VarChar(500)
  organizationId Int
  createdAt      DateTime @default(now()) @db.Timestamptz()
  updatedAt      DateTime @updatedAt @db.Timestamptz()

  //Parent (Many-to-One)
  project      Project      @relation(fields: [projectId], references: [id])
  Organization Organization @relation(fields: [organizationId], references: [id])

  //Child
  tickets Ticket[]
}

model Ticket {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar(150)
  description    String    @db.VarChar(3000)
  status         Status    @default(IN_PROGRESS)
  priority       Priority
  type           Type
  assigneeId     Int?
  reporterId     Int?
  boardId        Int
  dueDate        DateTime? @db.Timestamptz
  organizationId Int
  createdAt      DateTime  @default(now()) @db.Timestamptz()
  updatedAt      DateTime  @updatedAt @db.Timestamptz()

  //Parent (Many-to-One)
  board        Board        @relation(fields: [boardId], references: [id])
  Organization Organization @relation(fields: [organizationId], references: [id])
  assignee     User?        @relation(name: "assignee", fields: [assigneeId], references: [id])
  reporter     User?        @relation(name: "reporter", fields: [reporterId], references: [id])

  //Child
  comments Comment[]

  //Member
  ticketLabels TicketLabel[]
}

model Comment {
  id             Int      @id @default(autoincrement())
  ticketId       Int
  authorId       Int?
  content        String   @db.VarChar(1000)
  organizationId Int
  createdAt      DateTime @default(now()) @db.Timestamptz()
  updatedAt      DateTime @updatedAt @db.Timestamptz()

  //Parent
  ticket       Ticket       @relation(fields: [ticketId], references: [id])
  Organization Organization @relation(fields: [organizationId], references: [id])

  author User? @relation(fields: [authorId], references: [id])
}

model User {
  id               Int               @id @default(autoincrement())
  firstName        String?           @db.VarChar(150)
  lastName         String?           @db.VarChar(150)
  email            String            @unique @db.VarChar(255)
  passwordHash     String
  organizationRole OrganizationRole?
  globalRole       GlobalRole        @default(USER)
  avatarSource     String?           @default("NA") @db.VarChar(2048)
  isBanned         Boolean           @default(false)
  organizationId   Int?
  createdAt        DateTime          @default(now()) @db.Timestamptz()
  updatedAt        DateTime          @updatedAt @db.Timestamptz()
  deletedAt        DateTime?         @db.Timestamptz()
  isDeleted        Boolean?          @default(false)

  //passwordHash is the input password hashed by bcrypt

  //Ownership (One-to-many)
  ownedProjects  Project[]    @relation("ProjectOwner")
  comments       Comment[]
  attachments    Attachment[]
  assigneeTicket Ticket[]     @relation("assignee")
  reporterTicket Ticket[]     @relation("reporter")

  //Membership (Many-to-many through ProjectMember)
  projectMemberships ProjectMember[]

  //Other Relationships
  Organization Organization? @relation(fields: [organizationId], references: [id])
}

model Attachment {
  id             Int                  @id @default(autoincrement())
  entityType     AttachmentEntityType
  entityId       Int
  fileName       String               @db.VarChar(2048)
  fileSize       Int
  fileType       String               @db.VarChar(2048)
  fileUrl        String?              @db.VarChar(2048)
  filePath       String?
  uploadedBy     Int?
  organizationId Int
  createdAt      DateTime             @default(now()) @db.Timestamptz()
  deletedAt      DateTime?            @db.Timestamptz()
  storageType    StorageType          @default(LOCAL)

  //Relationships
  uploaded     User?        @relation(fields: [uploadedBy], references: [id])
  Organization Organization @relation(fields: [organizationId], references: [id])

  //Composite key index
  @@index([entityType, entityId])
}

model Label {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(25)
  color          String   @db.VarChar(9)
  organizationId Int
  createdAt      DateTime @default(now()) @db.Timestamptz()

  //Membership (Many-to-Many)
  TicketLabel TicketLabel[]

  //Root
  Organization Organization @relation(fields: [organizationId], references: [id])
}

model ActivityLog {
  id             Int               @id @default(autoincrement())
  userId         Int?
  actorType      ActorTypeActivity @default(USER)
  action         String            @db.VarChar(50)
  targetId       Int?
  targetType     String            @db.VarChar(50)
  metadata       Json?
  createdAt      DateTime          @default(now()) @db.Timestamptz()
  organizationId Int?

  //Root
  Organization Organization? @relation(fields: [organizationId], references: [id])
}

model BannedEmail {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(255)
  reason         String    @db.VarChar(2000)
  organizationId Int?
  createdAt      DateTime? @default(now()) @db.Timestamptz()

  //Root
  Organization Organization? @relation(fields: [organizationId], references: [id])
}

model TicketLabel {
  ticketId       Int
  labelId        Int
  organizationId Int

  //Relationship
  ticketLabel  Ticket       @relation(fields: [ticketId], references: [id])
  label        Label        @relation(fields: [labelId], references: [id])
  Organization Organization @relation(fields: [organizationId], references: [id])

  //Composite key index
  @@id([ticketId, labelId])
}

model ProjectMember {
  id             Int         @id @default(autoincrement())
  userId         Int
  projectId      Int
  projectRole    ProjectRole @default(USER)
  organizationId Int
  createdAt      DateTime    @default(now()) @db.Timestamptz()
  updatedAt      DateTime    @updatedAt @db.Timestamptz()

  //Relationships
  user         User         @relation(fields: [userId], references: [id])
  project      Project      @relation(fields: [projectId], references: [id])
  Organization Organization @relation(fields: [organizationId], references: [id])

  //Composite key
  @@unique([userId, projectId])
}

enum GlobalRole {
  SUPERUSER
  USER
}

enum OrganizationRole {
  GUEST
  USER
  ADMIN
  SUPERADMIN
}

enum ProjectRole {
  VIEWER
  USER
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

enum Status {
  BACKLOG
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Type {
  BUG
  TASK
  STORY
}

enum AttachmentEntityType {
  TICKET
  COMMENT
  USER
  PROJECT
  BOARD
}

enum StorageType {
  LOCAL
  CLOUD
}

enum ActorTypeActivity {
  USER
  SYSTEM
  // Future types: BOT, INTEGRATION, WEBHOOK
}
